//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v3.0-03/04/2009 09:20 AM(valikov)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.08.19 at 08:39:19 AM PDT 
//


package org.collectionspace.services.hyperjaxb;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.builder.JAXBEqualsBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBHashCodeBuilder;


/**
 * 
 *                 
 * 
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="pageNum" type="{http://www.w3.org/2001/XMLSchema}unsignedInt"/>
 *         &lt;element name="pageSize" type="{http://www.w3.org/2001/XMLSchema}unsignedInt"/>
 *         &lt;element name="itemsInPage" type="{http://www.w3.org/2001/XMLSchema}unsignedInt"/>
 *         &lt;element name="totalItems" type="{http://www.w3.org/2001/XMLSchema}unsignedInt"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "pageNum",
    "pageSize",
    "itemsInPage",
    "totalItems"
})
@XmlRootElement(name = "abstract-common-list")
public class AbstractCommonList
    implements Equals, HashCode
{

    @XmlSchemaType(name = "unsignedInt")
    protected long pageNum;
    @XmlSchemaType(name = "unsignedInt")
    protected long pageSize;
    @XmlSchemaType(name = "unsignedInt")
    protected long itemsInPage;
    @XmlSchemaType(name = "unsignedInt")
    protected long totalItems;

    /**
     * Gets the value of the pageNum property.
     * 
     */
    public long getPageNum() {
        return pageNum;
    }

    /**
     * Sets the value of the pageNum property.
     * 
     */
    public void setPageNum(long value) {
        this.pageNum = value;
    }

    /**
     * Gets the value of the pageSize property.
     * 
     */
    public long getPageSize() {
        return pageSize;
    }

    /**
     * Sets the value of the pageSize property.
     * 
     */
    public void setPageSize(long value) {
        this.pageSize = value;
    }

    /**
     * Gets the value of the itemsInPage property.
     * 
     */
    public long getItemsInPage() {
        return itemsInPage;
    }

    /**
     * Sets the value of the itemsInPage property.
     * 
     */
    public void setItemsInPage(long value) {
        this.itemsInPage = value;
    }

    /**
     * Gets the value of the totalItems property.
     * 
     */
    public long getTotalItems() {
        return totalItems;
    }

    /**
     * Sets the value of the totalItems property.
     * 
     */
    public void setTotalItems(long value) {
        this.totalItems = value;
    }

    public void equals(Object object, EqualsBuilder equalsBuilder) {
        if (!(object instanceof AbstractCommonList)) {
            equalsBuilder.appendSuper(false);
            return ;
        }
        if (this == object) {
            return ;
        }
        final AbstractCommonList that = ((AbstractCommonList) object);
        equalsBuilder.append(this.getPageNum(), that.getPageNum());
        equalsBuilder.append(this.getPageSize(), that.getPageSize());
        equalsBuilder.append(this.getItemsInPage(), that.getItemsInPage());
        equalsBuilder.append(this.getTotalItems(), that.getTotalItems());
    }

    public boolean equals(Object object) {
        if (!(object instanceof AbstractCommonList)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final EqualsBuilder equalsBuilder = new JAXBEqualsBuilder();
        equals(object, equalsBuilder);
        return equalsBuilder.isEquals();
    }

    public void hashCode(HashCodeBuilder hashCodeBuilder) {
        hashCodeBuilder.append(this.getPageNum());
        hashCodeBuilder.append(this.getPageSize());
        hashCodeBuilder.append(this.getItemsInPage());
        hashCodeBuilder.append(this.getTotalItems());
    }

    public int hashCode() {
        final HashCodeBuilder hashCodeBuilder = new JAXBHashCodeBuilder();
        hashCode(hashCodeBuilder);
        return hashCodeBuilder.toHashCode();
    }

}
