
<project name="services" default="package" basedir=".">
    <description>
        collectionspace services
    </description>
  <!-- set global properties for this build -->
    <property file="build.properties" />
    <property name="mvn.opts" value="" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>
    <property name="dist"  location="dist"/>

    <target name="set.jboss.home" unless="jboss.home">
        <property name="jboss.home" value="${jboss.dir}" />
    </target>

    <target name="setproperties" unless="jboss.server" depends="set.jboss.home">
        <property name="jboss.server" value="${jboss.home}/server/${jboss.config}" />
        <property name="jboss.deploy" value="${jboss.server}/deploy" />
        <property name="jboss.lib" value="${jboss.server}/lib" />
        <property name="nuxeo.deploy" value="${jboss.deploy}/nuxeo.ear" />
    </target>


    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" depends="setproperties">
    <!-- Create the time stamp -->
        <tstamp/>
    <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>

    </target>

    <target name="compile" depends="init"
        description="compile the source " >
    <!-- Compile the java code from ${src} into ${build} -->
        <javac srcdir="${src}" destdir="${build}"/>

    </target>

    <target name="dist" depends="compile"
        description="generate the distribution" >
        <fail message="JBoss is not installed or ${jboss.dir} not found">
            <condition>
                <not>
                    <available file="${jboss.dir}" type="dir"/>
                </not>
            </condition>
        </fail>

        <fail message="Nuxeo is not deployed or ${nuxeo.deploy} not found">
            <condition>
                <not>
                    <available file="${nuxeo.deploy}" type="dir"/>
                </not>
            </condition>
        </fail>

    <!-- Create the distribution directory -->
        <mkdir dir="${dist}"/>
        <tar destfile="${dist}/${jboss.release}.${nuxeo.release}.tar.gz" compression="gzip">
            <tarfileset dir="${jboss.dir}"
              preserveLeadingSlashes="true">
                <exclude name="server/${jboss.config}/log/**"/>
                <exclude name="server/${jboss.config}/tmp/**"/>
                <exclude name="server/${jboss.config}/deploy/helloworld.war"/>
            </tarfileset>
            <tarfileset dir="${src}/main/resources"
              preserveLeadingSlashes="true">
                <exclude name="schemas/**"/>
            </tarfileset>

        </tar>
    </target>

    <target name="package" depends="setproperties,package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="eclipse" depends="eclipse-unix,eclipse-windows" description="Generate Eclipse files" />
    <target name="eclipse-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="eclipse:clean" />
            <arg value="eclipse:eclipse" />
            <arg value="${mvn.opts}" />
        </exec>
        <exec executable="fixeclipse" failonerror="true" />
    </target>
    <target name="eclipse-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="eclipse:clean" />
            <arg value="eclipse:eclipse" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

</project>
