<project name="nuxeo-database-templates" default="package" basedir=".">
    <description>
       Deploys per-database templates used by Nuxeo.  Among other things, 
       these templates designate the fields in database tables to be
       defined as CLOB types, capable of holding large amounts of text.
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env"/>
    <property file="${services.trunk}/build.properties"/>
    <!-- set the name of CollectionSpace's template directory, based in part -->
    <!-- on the name of the current database specified in top-level build.properties -->
    <property name="collectionspace.prefix" value="collectionspace_"/>
    <!-- Uses the database name from the 'db' property in the top-level build.properties file -->
    <property name="collectionspace.template.dir" value="${collectionspace.prefix}${db}"/>
    <property name="collectionspace.template.dir.path" value="${basedir}/${db}/${collectionspace.template.dir}"/>
    <property name="backup.suffix" value=".cspace.bak"/>

    <target name="init"
        description="creates a time stamp">
        <tstamp/>
    </target>
    
    <!-- Deploy-related targets -->

    <target name="deploy"
    	description="deploys a database template directory to Nuxeo"
        depends="deploy-templates-dir, update-nuxeo-config">
    </target>
    
    <target name="deploy-templates-dir"
    	description="deploys a CollectionSpace-specific Nuxeo database template folder"
        depends="check-templates-dir-exists">
        <mkdir dir="${nuxeo.templates.dir}/${collectionspace.template.dir}"/>
        <copy todir="${nuxeo.templates.dir}/${collectionspace.template.dir}">
            <fileset dir="${collectionspace.template.dir.path}"/>
        </copy>
    </target>

    <target name="update-nuxeo-config"
    	description="updates the active Nuxeo configuration file to specify the database template folder to use for CollectionSpace"
        depends="check-templates-dir-exists, check-propertyfile-task-exists, set-nuxeo-active-config, backup-nuxeo-config" if="has.propertyfile.task">
        <!-- Set the value of the property pointing to the active templates directory (or directories) -->
        <echo message="Setting the Nuxeo database templates directory ..."/>
        <propertyfile file="${nuxeo.active.config.file}">
             <entry key="nuxeo.templates" operation="=" value="${collectionspace.template.dir}"/>
             <entry key="nuxeo.db.user" operation="=" value="${db.nuxeo.user}"/>
             <entry key="nuxeo.db.password" operation="=" value="${db.nuxeo.user.password}"/>
        </propertyfile>
    </target>
    
    <!-- Undeploy-related targets -->

    <target name="undeploy"
        description="undeploys CollectionSpace-specific Nuxeo database template folders"
        depends="undeploy-template-dirs, reset-nuxeo-config">
    </target>
    
    <target name="undeploy-template-dirs"
    	description="deletes CollectionSpace-specific database template folders from the deploy directory"
        depends="check-templates-dir-exists">
        <delete quiet="false" includeemptydirs="true">
            <fileset id="collectionspace.template.files" dir="${nuxeo.templates.dir}">
                <patternset>
                    <include name="**/${collectionspace.prefix}*/**"/>
                </patternset>
            </fileset>
        </delete>
    </target>
    
   <target name="reset-nuxeo-config"
    	description="resets the value of the database template folder in the active Nuxeo configuration file to an empty value"
        depends="check-propertyfile-task-exists, set-nuxeo-active-config, backup-nuxeo-config"
        if="has.propertyfile.task">
        <propertyfile file="${nuxeo.active.config.file}">
            <entry key="nuxeo.templates" operation="=" value=""/>
        </propertyfile>
    </target>
    
    <!-- Utility targets -->
    
    <target name="set-nuxeo-active-config"
        description="Sets the path to the active Nuxeo configuration file"
        depends="set-nuxeo-active-config-with-env, set-nuxeo-active-config-without-env">
    </target>

    <target name="set-nuxeo-active-config-with-env" if="env.NUXEO_CONF"
        description="Sets the path to the active Nuxeo configuration file, if set in the NUXEO_CONF environment variable">
        <property name="nuxeo.active.config.file" value="${env.NUXEO_CONF}"/>
    </target>

    <target name="set-nuxeo-active-config-without-env" unless="env.NUXEO_CONF"
        description="Sets the path to the active Nuxeo configuration file, in the absence of a NUXEO_CONF environment variable">
        <property name="nuxeo.active.config.file" value="${nuxeo.main.config.file}"/>
    </target>

    <target name="backup-nuxeo-config"
    	description="makes a single backup copy of the active, main Nuxeo configuration file, overwriting the previous backup">
        <copy file="${nuxeo.active.config.file}" tofile="${nuxeo.active.config.file}${backup.suffix}" overwrite="true"/>
    </target>
    
    <target name="check-templates-dir-exists"
    	description="checks for the existence of a Nuxeo database template folder for the ${db} database">
        <available file="${collectionspace.template.dir.path}" type="dir"
            property="has.templates.dir"/>
        <fail unless="has.templates.dir"
            message="Nuxeo database templates directory ${collectionspace.template.dir.path} could not be found."/>
    </target>

    <target name="check-propertyfile-task-exists" if="has.minimum.ant.version"
        description="checks that the PropertyFile task exists; that task is required by one or more targets in this build file"
        depends="check-minimum-ant-version">
        <available classname="org.apache.tools.ant.taskdefs.optional.PropertyFile"
            property="has.propertyfile.task"/>
    </target>
    
    <target name="check-minimum-ant-version"
        description="checks that the minimum required Ant version is available">
        <!-- The PropertyFile task - bundled with Ant version 1.8.0 and -->
        <!-- integral to Ant in version 1.8.2 - is required to preserve -->
        <!-- file comments and layout when editing properties files. -->
        <condition property="has.minimum.ant.version">
            <antversion atleast="1.8.0"/>
        </condition> 
    </target>

</project>
